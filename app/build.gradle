apply plugin: 'com.android.application'
def config = rootProject.ext.android
android {
    //config.gradle 文件名
    compileSdkVersion config.compileSdkVersion
    buildToolsVersion config.buildToolsVersion
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    dataBinding {
        enabled = true
    }
    defaultConfig {
        applicationId "com.aite.aitezhongbao"
        minSdkVersion config.minSdkVersion
        targetSdkVersion config.targetSdkVersion
        versionCode 1
        versionName "1.0.0"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        multiDexEnabled true
        ndk {
            //选择要添加的对应cpu类型的.so库（不需要的删除即可）。
            abiFilters 'armeabi', 'armeabi-v7a', 'armeabi-v8a', 'x86', 'x86_64', 'mips', 'mips64'
        }
        packagingOptions {
            exclude 'META-INF/rxjava.properties'
        }
    }
    /**
     * 生成apk的名字
     */
    applicationVariants.all{ variant->
        variant.outputs.all { output->
            if (variant.buildType.name == 'release' || variant.buildType.name == 'debug') {
                outputFileName= "Zhongbao_V ${versionName}.apk"
            }
        }
    }
    dexOptions {
        javaMaxHeapSize "4g"
    }

    Properties props = new Properties()
    props.load(new FileInputStream(rootProject.file("signing.properties")))
    signingConfigs {
        //signing.properties 文件名
        release {//发布版本的签名配置
            storeFile file(props['KEYSTORE_FILE'])
            keyAlias props['KEY_ALIAS']
            storePassword props['KEYSTORE_PWD']
            keyPassword props['KEY_PWD']
        }
        debug {//调试版本的签名配置
            storeFile file(props['DEBUG_KEYSTORE'])
            keyAlias props['DEBUG_ALIAS']
            storePassword props['DEBUG_KEYSTORE_PWD']
            keyPassword props['DEBUG_KEY_PWD']
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
        debug {
            signingConfig signingConfigs.release
        }
    }
}
dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test.ext:junit:1.1.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'
    annotationProcessor 'com.github.bumptech.glide:compiler:4.10.0'
    annotationProcessor 'com.jakewharton:butterknife-compiler:10.2.0'
    //library
    implementation project(path: ':baselibrary')
    implementation project(path: ':mainlibrary')
    implementation project(path: ':alipaylibrary')
    implementation project(path: ':glibrary')
    implementation project(path: ':shopMallLibrary')
    //今日头条适配
    implementation 'me.jessyan:autosize:0.9.5'
    implementation 'org.greenrobot:eventbus:3.1.1'

}
